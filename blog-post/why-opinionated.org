#+TITLE:  Why opinionated?
#+EMAIL:  well1912@gmail.com
#+HTML_HEAD: <style type="text/css">body {color: #333333; max-width: 50em; margin: auto;} a {color: #333333;}</style>
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: html-postamble:nil

* Style checkers are frequently opinionated
Code formatters frequently tout themselves as being "opinionated." At
first glance, the motivation seems clear: a major selling point of
these code formatters is to resolve conflicts that would otherwise be
resolved during PR review. Many prominent style checkers tout
themselves as being opinionated, and to varying degrees there are.
gofmt has no configuration at all, black offers a few weak command
line options, and prettier calls itself "opinionated" despite having
configuration. However, I'd like to argue that this perceived
strength is actually a weakness.

* /If my formatter isn't opinionated, teams will keep arguing about style!/
Solution: create a configuration file for your formatter and either
force such arguments to be in PRs concerning that file alone, or just
tell team members that the file can't be changed. While you may think
that this assumed team simply not accept these rule, in practice the
alternative will simply make your team harder to sell on the code
formatter! For example, when my team was debating picking up black, an
otherwise very pragmatic engineer argued against it simply because it
did not allow for single quotes. (This was before the -S option was
added.)

* /If my formatter isn't opinionated, it'll be hard to switch between projects with differing configs!/
A "core tenant" of the black project is as follows:

#+BEGIN_QUOTE
  Blackened code looks the same regardless of the project you're
  reading. Formatting becomes transparent after a while and you can
  focus on the content instead.
#+END_QUOTE

In this case, the second sentence attempts to justify the first, but
fails to provide any evidence for an assumed argument: that when
formatting is inconsistent between projects, it causes problems with
readability.

While it's easy to imagine a style that is unreadable, in my
experience most projects have reasonable formatting regardless of if
they use an autoformatter. It is likely not hard to constrain the
options enough that all valid configurations are reasonably
readable. In my experience, I find it much more difficult to process
code style preferences that autoformatters cannot control, like
architectural patterns.

Also, until such autoformatter is universally accepted (granted, this
is the case with a minority of formatters e.g. gofmt) there is no real
advantage here and formatted code is really just another style to get
used to.

* Style nitpicks are generally redirected to the project itself
For example, with black the [[https://github.com/psf/black/issues/118][single quotes option thread]] has many
people coming in to voice their opinion. When projects are considering
picking up black, they may search "black single quotes" and find this
thread, read the discussion, and decide against relying on a project
that is perceived to be hostile to its users.
